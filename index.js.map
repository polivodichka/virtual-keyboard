{"version":3,"file":"index.js","mappings":";;;AAAuB;AACK;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,4BAA4B;AAC5C;AACA,kCAAkC,MAAM;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,cAAc;AAC/D,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yHAAyH,4EAA4E;AACrM,4KAA4K,4DAA4D;AACxO,qEAAqE,iBAAiB;AACtF,SAAS;AACT;AACA,yGAAyG,gDAAgD;AACzJ,yHAAyH,4DAA4D;AACrL,mEAAmE,iBAAiB;AACpF,SAAS;AACT;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,mBAAmB,MAAM,gBAAgB;AACtE;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,OAAO;AAC1C,IAAI;AACJ;AACA;AACA,CAAC;AACD;AACA;AACA,+BAA+B,mBAAmB,MAAM,gBAAgB;AACxE,GAAG;AACH;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://virtual-keyboard/./src/script.js"],"sourcesContent":["import 'normalize.css';\r\nimport './style/style.scss';\r\n\r\nconst preloader = document.createElement('div');\r\npreloader.className = 'preloader';\r\ndocument.body.append(preloader);\r\n\r\nconst preloaderPhrase = 'virtual keyboard';\r\n\r\nfor (let i = 0; i < preloaderPhrase.length; i += 1) {\r\n  const spanPreloader = document.createElement('span');\r\n  spanPreloader.className = `let${i + 1}`;\r\n  spanPreloader.innerHTML = preloaderPhrase[i];\r\n\r\n  preloader.append(spanPreloader);\r\n}\r\n\r\nwindow.addEventListener('load', () => {\r\n  document.body.classList.add('loaded_hiding');\r\n  window.setTimeout(() => {\r\n    document.body.classList.add('loaded');\r\n    document.body.classList.remove('loaded_hiding');\r\n  }, 300);\r\n});\r\n\r\nconst shiftLeft = 'ShiftLeft';\r\nconst shiftRight = 'ShiftRight';\r\n\r\nlet activeLang = localStorage.getItem('lang') ? localStorage.getItem('lang') : 'ru';\r\nlocalStorage.setItem('lang', activeLang);\r\n\r\nconst textarea = document.createElement('textarea');\r\ntextarea.cols = 91;\r\ntextarea.rows = 10;\r\ntextarea.wrap = '\\n';\r\ndocument.body.append(textarea);\r\nsetInterval(() => {\r\n  textarea.focus();\r\n}, 0);\r\n\r\nconst keyboard = document.createElement('div');\r\nkeyboard.className = 'keyboard';\r\ndocument.body.append(keyboard);\r\n\r\nlet capsPressed = false;\r\n\r\nconst currentKeyboard = {};\r\nlet keysOnPage;\r\n\r\nconst apiUrl = 'https://api.unsplash.com/photos/random?query=spring&client_id=SouHY7Uul-OxoMl3LL3c0NkxUtjIrKwf3tsGk1JaiVo&orientation=landscape';\r\n\r\nasync function getBgImage() {\r\n  try {\r\n    const res = await fetch(apiUrl);\r\n    const data = await res.json();\r\n    document.body.style.backgroundImage = `url(${data.urls.raw})`;\r\n  } catch {\r\n    document.body.style.backgroundImage = 'url(\\'../assets/images/aaron-burden-uyJ-osS2YQI-unsplash.jpg\\')';\r\n  }\r\n}\r\ngetBgImage();\r\n\r\nasync function getData() {\r\n  const keyboardData = 'assets/keyboard.json';\r\n  const res = await fetch(keyboardData);\r\n  const data = await res.json();\r\n\r\n  return data;\r\n}\r\n\r\n// fill current info about keys and add them on page if it necessary\r\n// reusable function\r\nfunction changeCurrentKeyboard(language, shift = false) {\r\n  getData().then((result) => {\r\n    result[language].forEach((key) => {\r\n      if (!document.getElementById(key.eventCode)) {\r\n        const newKey = document.createElement('div');\r\n        newKey.className = key.type;\r\n        newKey.id = key.eventCode;\r\n        newKey.innerHTML = key.character;\r\n\r\n        keyboard.append(newKey);\r\n\r\n        newKey.addEventListener('mousedown', () => {\r\n          if (newKey.id === shiftLeft || newKey.id === shiftRight) textarea.dispatchEvent(new KeyboardEvent('keydown', { key: currentKeyboard[newKey.id].character, code: newKey.id, shiftKey: true }));\r\n          else if (currentKeyboard[newKey.id].type === 'functional' || currentKeyboard[newKey.id].type === 'spacing') textarea.dispatchEvent(new KeyboardEvent('keydown', { key: currentKeyboard[newKey.id].character, code: newKey.id }));\r\n          else textarea.dispatchEvent(new KeyboardEvent('keydown', { code: newKey.id }));\r\n        });\r\n        newKey.addEventListener('mouseup', () => {\r\n          if (newKey.id === shiftLeft || shiftRight) textarea.dispatchEvent(new KeyboardEvent('keyup', { key: 'Shift', code: newKey.id, shiftKey: false }));\r\n          else if (currentKeyboard[newKey.id].type === 'functional') textarea.dispatchEvent(new KeyboardEvent('keyup', { key: currentKeyboard[newKey.id].character, code: newKey.id }));\r\n          else textarea.dispatchEvent(new KeyboardEvent('keyup', { code: newKey.id }));\r\n        });\r\n        keysOnPage = [...document.querySelectorAll('.keyboard div')];\r\n      } else {\r\n        document.getElementById(key.eventCode).innerHTML = key.character;\r\n        if (shift) Shift(true, capsPressed);\r\n        else if (capsPressed) CapsLock(capsPressed);\r\n      }\r\n\r\n      currentKeyboard[key.eventCode] = key;\r\n      textarea.placeholder = activeLang === 'ru' ? 'Клавиатура создана в операционной системе Windows\\nДля переключения языка комбинация: левыe ctrl + alt' : 'The keyboard was created in the Windows operating system\\nCombination to switch the language: left ctrl + alt';\r\n    });\r\n  });\r\n}\r\n\r\nchangeCurrentKeyboard(activeLang);\r\n\r\n// add listeners for keys on keyboard (run once)\r\ntextarea.addEventListener('keydown', (e) => {\r\n  document.getElementById(`${e.code === '' ? `${e.key}Right` : e.code}`).classList.add('active');\r\n\r\n  if (e.code === 'CapsLock') {\r\n    capsPressed = !capsPressed;\r\n    CapsLock(capsPressed, e.shiftKey);\r\n  } else if (e.key === 'Shift') Shift(e.shiftKey, capsPressed);\r\n  else if (currentKeyboard[e.code].type === 'letter'\r\n        || currentKeyboard[e.code].type === 'changable'\r\n        || currentKeyboard[e.code].type === 'spacing') {\r\n    // eslint-disable-next-line no-nested-ternary\r\n    replaceCharacter(currentKeyboard[e.code].type === 'spacing' ? (\r\n      // eslint-disable-next-line no-nested-ternary\r\n      e.code === 'Enter' ? '\\n'\r\n        : e.code === 'Tab' ? '\\t' : '')\r\n      : document.getElementById(`${e.code}`).innerHTML, e);\r\n  } else if (e.code === 'Backspace') Backspace(e);\r\n  else if (e.code === 'Delete') Delete(e);\r\n  else if (e.key === 'Alt' || e.key === 'Control') ControlAlt(e);\r\n});\r\ntextarea.addEventListener('keyup', (e) => {\r\n  setTimeout(() => {\r\n    document.getElementById(`${e.code === '' ? `${e.key}Right` : e.code}`).classList.remove('active');\r\n  }, 300);\r\n  if (e.key === 'Shift') Shift(e.shiftKey, capsPressed);\r\n});\r\n\r\n// Replace the standard character with the desired one\r\n// for all LETTERS and CHANGEABLE CHARACTERS\r\nfunction replaceCharacter(newChar, e) {\r\n  // get old data\r\n  const start = e.target.selectionStart;\r\n  const end = e.target.selectionEnd;\r\n  const oldValue = e.target.value;\r\n\r\n  // count new value and replace old value with te new one\r\n  const newValue = oldValue.slice(0, start) + newChar + oldValue.slice(end);\r\n  e.target.value = newValue;\r\n\r\n  // move cursor\r\n  e.target.selectionStart = start + 1;\r\n  e.target.selectionEnd = e.target.selectionStart;\r\n\r\n  e.preventDefault(); // отмена стандартного функционала кнопки\r\n}\r\n\r\n// ____________KEYS FUNCTIONS_____________\r\n\r\n// CapsLock key\r\nfunction CapsLock(caps, shift = false) {\r\n  keysOnPage.forEach((key) => {\r\n    if (currentKeyboard[key.id].type === 'letter') {\r\n      if (caps) key.innerHTML = shift ? key.innerHTML.toLowerCase() : key.innerHTML.toUpperCase();\r\n      else if (!caps) {\r\n        key.innerHTML = shift ? key.innerHTML.toUpperCase() : key.innerHTML.toLowerCase();\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n// Shift key\r\nfunction Shift(shift, caps) {\r\n  keysOnPage.forEach((key) => {\r\n    if (currentKeyboard[key.id].type === 'letter' && caps) {\r\n      key.innerHTML = shift ? key.innerHTML.toLowerCase() : key.innerHTML.toUpperCase();\r\n    } else if (currentKeyboard[key.id].type === 'letter' && !caps) {\r\n      key.innerHTML = shift ? key.innerHTML.toUpperCase() : key.innerHTML.toLowerCase();\r\n    }\r\n    if (currentKeyboard[key.id].type === 'changable') {\r\n      key.innerHTML = shift ? currentKeyboard[key.id].shiftedCharacter\r\n        : currentKeyboard[key.id].character;\r\n    }\r\n  });\r\n}\r\n\r\n// Alt and Ctrl keys\r\nfunction ControlAlt(e) {\r\n  if (e.ctrlKey && e.altKey) {\r\n    activeLang = (activeLang === 'ru' ? 'en' : 'ru');\r\n    localStorage.setItem('lang', activeLang);\r\n    changeCurrentKeyboard(activeLang, e.shiftKey);\r\n  }\r\n\r\n  e.preventDefault();\r\n}\r\n\r\n// Backspace key\r\nfunction Backspace(e) {\r\n  // get old data\r\n  const start = e.target.selectionStart;\r\n  const end = e.target.selectionEnd;\r\n  const oldValue = e.target.value;\r\n\r\n  // count new value and replace old value with te new one\r\n  const newValue = oldValue.slice(0, start === end ? start - 1 : start) + oldValue.slice(end);\r\n  e.target.value = newValue;\r\n\r\n  // move cursor\r\n  e.target.selectionStart = start === end ? start - 1 : start;\r\n  e.target.selectionEnd = e.target.selectionStart;\r\n\r\n  e.preventDefault();\r\n}\r\n\r\n// Delete key\r\nfunction Delete(e) {\r\n  // get old data\r\n  const start = e.target.selectionStart;\r\n  const end = e.target.selectionEnd;\r\n  const oldValue = e.target.value;\r\n\r\n  if (!(oldValue.length > end)) return false;\r\n\r\n  // count new value and replace old value with te new one\r\n  const newValue = oldValue.slice(0, start) + oldValue.slice(end + 1);\r\n  e.target.value = newValue;\r\n\r\n  // move cursor\r\n  e.target.selectionStart = start;\r\n  e.target.selectionEnd = e.target.selectionStart;\r\n\r\n  e.preventDefault();\r\n}\r\n"],"names":[],"sourceRoot":""}